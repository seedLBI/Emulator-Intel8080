#ifndef UNICODE_H
#define UNICODE_H

#include <vector>
#include <string>
#include <unordered_map>
#include <stdexcept>


enum class UNICODE_BLOCK_NAMES {
    Basic_Latin,
    Latin_1_Supplement,
    Latin_Extended_A,
    Latin_Extended_B,
    IPA_Extensions,
    Spacing_Modifier_Letters,
    Combining_Diacritical_Marks,
    Greek_and_Coptic,
    Cyrillic,
    Cyrillic_Supplement,
    Armenian,
    Hebrew,
    Arabic,
    Syriac,
    Arabic_Supplement,
    Thaana,
    NKo,
    Samaritan,
    Mandaic,
    Syriac_Supplement,
    Arabic_Extended_B,
    Arabic_Extended_A,
    Devanagari,
    Bengali,
    Gurmukhi,
    Gujarati,
    Oriya,
    Tamil,
    Telugu,
    Kannada,
    Malayalam,
    Sinhala,
    Thai,
    Lao,
    Tibetan,
    Myanmar,
    Georgian,
    Hangul_Jamo,
    Ethiopic,
    Ethiopic_Supplement,
    Cherokee,
    Unified_Canadian_Aboriginal_Syllabics,
    Ogham,
    Runic,
    Tagalog,
    Hanunoo,
    Buhid,
    Tagbanwa,
    Khmer,
    Mongolian,
    Unified_Canadian_Aboriginal_Syllabics_Extended,
    Limbu,
    Tai_Le,
    New_Tai_Lue,
    Khmer_Symbols,
    Buginese,
    Tai_Tham,
    Combining_Diacritical_Marks_Extended,
    Balinese,
    Sundanese,
    Batak,
    Lepcha,
    Ol_Chiki,
    Cyrillic_Extended_C,
    Georgian_Extended,
    Sundanese_Supplement,
    Vedic_Extensions,
    Phonetic_Extensions,
    Phonetic_Extensions_Supplement,
    Combining_Diacritical_Marks_Supplement,
    Latin_Extended_Additional,
    Greek_Extended,
    General_Punctuation,
    Superscripts_and_Subscripts,
    Currency_Symbols,
    Combining_Diacritical_Marks_for_Symbols,
    Letterlike_Symbols,
    Number_Forms,
    Arrows,
    Mathematical_Operators,
    Miscellaneous_Technical,
    Control_Pictures,
    Optical_Character_Recognition,
    Enclosed_Alphanumerics,
    Box_Drawing,
    Block_Elements,
    Geometric_Shapes,
    Miscellaneous_Symbols,
    Dingbats,
    Miscellaneous_Mathematical_Symbols_A,
    Supplemental_Arrows_A,
    Braille_Patterns,
    Supplemental_Arrows_B,
    Miscellaneous_Mathematical_Symbols_B,
    Supplemental_Mathematical_Operators,
    Miscellaneous_Symbols_and_Arrows,
    Glagolitic,
    Latin_Extended_C,
    Coptic,
    Georgian_Supplement,
    Tifinagh,
    Ethiopic_Extended,
    Cyrillic_Extended_A,
    Supplemental_Punctuation,
    CJK_Radicals_Supplement,
    Kangxi_Radicals,
    Ideographic_Description_Characters,
    CJK_Symbols_and_Punctuation,
    Hiragana,
    Katakana,
    Bopomofo,
    Hangul_Compatibility_Jamo,
    Kanbun,
    Bopomofo_Extended,
    CJK_Strokes,
    Katakana_Phonetic_Extensions,
    Enclosed_CJK_Letters_and_Months,
    CJK_Compatibility,
    CJK_Unified_Ideographs_Extension_A,
    Yijing_Hexagram_Symbols,
    CJK_Unified_Ideographs,
    Yi_Syllables,
    Yi_Radicals,
    Lisu,
    Vai,
    Cyrillic_Extended_B,
    Bamum,
    Modifier_Tone_Letters,
    Latin_Extended_D,
    Syloti_Nagri,
    Common_Indic_Number_Forms,
    Phags_pa,
    Saurashtra,
    Devanagari_Extended,
    Kayah_Li,
    Rejang,
    Hangul_Jamo_Extended_A,
    Javanese,
    Myanmar_Extended_B,
    Cham,
    Myanmar_Extended_A,
    Tai_Viet,
    Meetei_Mayek_Extensions,
    Ethiopic_Extended_A,
    Latin_Extended_E,
    Cherokee_Supplement,
    Meetei_Mayek,
    Hangul_Syllables,
    Hangul_Jamo_Extended_B,
    High_Surrogates,
    High_Private_Use_Surrogates,
    Low_Surrogates,
    Private_Use_Area,
    CJK_Compatibility_Ideographs,
    Alphabetic_Presentation_Forms,
    Arabic_Presentation_Forms_A,
    Variation_Selectors,
    Vertical_Forms,
    Combining_Half_Marks,
    CJK_Compatibility_Forms,
    Small_Form_Variants,
    Arabic_Presentation_Forms_B,
    Halfwidth_and_Fullwidth_Forms,
    Specials,
    UNKNOWN,
};


struct UnicodeRanges {
    uint64_t Range_Left;
    uint64_t Range_Right;
};

const extern std::vector<UnicodeRanges> UnicodeBlocks;

uint64_t strUTF8Symbol_to_UnicodeValue(const std::string& UTF8Symbol);

std::string         Translate_enumUNICODE_BLOCK_NAMES_to_str(const UNICODE_BLOCK_NAMES& BlockIndex);
UNICODE_BLOCK_NAMES Translate_str_to_enumUNICODE_BLOCK_NAMES(const std::string& NameBlock);

UnicodeRanges       Get_Ranges_from_enumUNICODE_BLOCK_NAMES(const UNICODE_BLOCK_NAMES& BlockIndex);
UNICODE_BLOCK_NAMES Get_UNICODE_BLOCK_NAMES_from_UnicodeSymbol(const uint64_t& symbol);


uint64_t LowerCase_Unicode(const uint64_t& UnicodeSymbol);
uint64_t UpperCase_Unicode(const uint64_t& UnicodeSymbol);



std::string UnicodeValue_to_UTF8str(const uint64_t& UnicodeValue);



#endif // !UNICODE_H
