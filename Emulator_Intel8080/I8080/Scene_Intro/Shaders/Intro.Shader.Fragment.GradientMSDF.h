#pragma once
const char* GradientMSDF_fragment =
"#version 330 core\n"
"in vec2 TexCoord;\n"
"out vec4 fragColor;\n"
"uniform sampler2D MSDF_texture;\n"
"layout(std140) uniform ValuesBlock\n"
"{\n"
"    float Time;\n"
"    float Time2;\n"
"    vec2 Resolution;\n"
"};\n"
"uniform vec4 bgColor = vec4(0.f);\n"
"uniform vec4 fgColor = vec4(1.f, 1.f, 1.f, 1.f);\n"
"uniform float pxRange = 1.1f;\n"
"uniform float koef = 0.25f;\n"
"float median(float r, float g, float b) {\n"
"    return max(min(r, g), min(max(r, g), b));\n"
"}\n"
"float screenPxRange(vec2 coords) {\n"
"    vec2 unitRange = vec2(pxRange) / vec2(textureSize(MSDF_texture, 0));\n"
"    vec2 screenTexSize = vec2(1.0) / fwidth(coords);\n"
"    return max(0.5 * dot(unitRange, screenTexSize), 1.0);\n"
"}\n"
"vec2 rotate(vec2 v, float a) {\n"
"    float s = sin(a);\n"
"    float c = cos(a);\n"
"    mat2 m = mat2(c, s, -s, c);\n"
"    return m * v;\n"
"}\n"
"void main() {\n"
"    vec2 Screen_uv = vec2(2.f - gl_FragCoord.x / Resolution.x * 2.0f, 2.f - gl_FragCoord.y / Resolution.y * 2.0f);\n"
"    Screen_uv = rotate(Screen_uv + vec2(0.5, -1.5), Time * 0.25f);\n"
"    vec4 AddingColor = abs(vec4(Screen_uv.x * 0.35f, Screen_uv.y, Screen_uv.x, 0.f)) * koef;\n"
"    vec3 msd = texture(MSDF_texture, TexCoord).rgb;\n"
"    float sd = median(msd.r, msd.g, msd.b);\n"
"    float screenPxDistance = screenPxRange(TexCoord) * (sd - 0.5);\n"
"    float opacity = clamp(screenPxDistance + 0.5, 0.0, 1.0);\n"
"    fragColor = mix(bgColor, fgColor + AddingColor, opacity);\n"
"}\n";